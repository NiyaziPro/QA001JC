Exception: Kod çalıştırıldığında akışı bozan hatalardır. "Beklenmedik sorunlar" demektir.
Her exception, hata mesajını ve hata türüne ait bilgiyi içinde bulundurur.

1- exception (İstisnalar) , normal kod yürütme akışını bozan hatalardir.

2- exception bir classtir. Methodlari vardir. Kendi icinde hata kodlari, bilgi mesajlari vardir.
Ornegin; classtaki bir method cagirildigi zaman kod calismaya baslar. Bu andan itibaren kodlar satir satir
okunmaya baslar. Ve kodlarda bir hata varsa, exception durumu olusur.

Tabi bu hatalari developer onceden ongorup handler etmeli, duzeltmelidir ama kullanici programimizi
kullanirken ongorulmeyen durumlar her zaman olusabilir. Bir hata olustugunda neden kaynaklandigini
ogrenip cozmek, o an cozulemiyorsa da sistemin durmayip calismasinin devam etmesi icin alternatif
cozumler uretmek gerekiyor

3- Bir exception oluştuğunda, kod yürütme durur. Exception'lar, hata ayıklama günlüklerinde(log) oturum açar.
4- Exception Handling, Java'da, akışı kesintiye uğratmadan kodumuzdaki istenmeyen istisnaları
veya sorunları işlememize olanak tanıyan bir yöntemdir

5- Exception denince akliniza 3 seyin gelmesi lazim. try, catch ve finally (optional).

6- Kod başarılı bir şekilde çalışmadığında bile, kullanıcı deneyiminin sorunsuz olmasını sağlamak için,
tüm yürütmeleri bir try catch ifadesine sarmak programlama dünyasında en iyi uygulama olarak kabul edilir.
Ancak, tüm kodları körü körüne try-catch blokları içine almak her zaman en iyi pratik değildir.
Bu, hataları maskeleyebilir ve programın gerçek hataları gizlemesine yol açabilir.

https://docs.oracle.com/javase/8/docs/api/java/lang/Exception.html

1) ArithmeticException : Matematik kurallarinda herhangi bir hata yaparsaniz bu exception'i alirsiniz

- try-catch kullandiginizda sistem tarafindan "try" bolumu calistirilir,
- eger "try" bolumunde hata ile karsilasilmazsa "catch" blogu hic calismaz
- Eger "try" bolumunde hata ile karsilasilirsa hata alinan satirda calisma durdurulur
- ve "catch - yakalamak" bolumu calismaya baslar.

2) NumberFormatException : Bir metnin sayisal bir deger olarak donusturulememesi durumunda olusur
3) StringIndexOutOfBoundsException, bir String nesnesinin karakter dizisindeki
geçersiz bir indekse erişmeye çalışıldığında ortaya çıkan bir istisna türüdür.
4) ArrayIndexOutOfBoundsException: Bir dizi elemanına erişilmeye çalışıldığında,
dizi boyutunu aşan bir indeks kullanıldığında meydana gelir.
5) NullPointerException:(bos isaretcisi) Null degerindeki bir variable referans olarak kullanildiginda olusur
6) IllegalArgumentException, bir metodun geçersiz bir argüman aldığında oluşan bir hata türüdür.



1) Çalıştırma düğmesine bastıktan sonra karşılaşılan hatalar Çalışma Zamanı Hataları olarak adlandırılır...
       örneğin ArithmeticException,
       NullPointerException,
       StringIndexOutOfBoundsException

       Çalışma Zamanı Hataları aynı zamanda "Unchecked Exception" (çalıştırma düğmesine basmadan önce kontrol edilmez) olarak da adlandırılır.


    2) Kod yazarken kırmızı alt çizgilerle belirtilen hatalar da vardır.
       Bunlar "Derleme Zamanı Hataları" yani"Compile time exceptions" olarak adlandırılır
       ve derleme zamanı hataları "Checked Exception" olarak da bilinir...
       (çalıştırma düğmesine basmadan önce kontrol edilir)

Açıklama; FileInputStream kullandık. Bu bir sınıftır. FileInputStream sınıfı Java'da dosyaları byte formatında okumak için kullanılır.
java.io paketinin bir parçasıdır.
Genellikle metin dosyaları, resimler, ses dosyaları gibi dosya türlerini okumak için kullanılır..

Not: ASCII tablosunda "A" veya herhangi bir karakter 1 byte'a eşittir.....


FileInputStream fis = new FileInputStream("src/main/java/d32Exceptions/file.txt");
Root'ta dosya yoksa ne olur, bir istisna alırsınız (FileNotFoundException)

//Dosyada okunacak metin bittiğinde ASCII değeri -1 dönecektir
while ((k = fis.read()) != -1) {

    System.out.print((char) k); // ASCII değerini karaktere dönüştürmek için type casting kullandım

    //read() metodu dosyadan bir byte okur (0'dan 255'e kadar olan tamsayı-ASCII değerini döner)
    //Eğer dosya 'A' karakterini içeriyorsa, read() metodu 65 değerini döndürecektir.
    //Eğer dosya 'a' karakterini içeriyorsa, read() metodu 97 değerini döndürecektir.
    //-1 dosyanın sonu (EOF) olarak kabul edilir.
    //read() dosyanın sonuna ulaştığında -1 döner.

throw ve throws arasındaki farklar nelerdir?
1) "throw" metot gövdesi içinde kullanılır,
   ama "throws" metot parantezlerinden sonra kullanılır (metot imzası gibi)
2) throw, metot gövdesi içinde istenilen yerde ve istenildiği kadar yazılıp kullanılabilir.
   throws, metot imzasından hemen sonra ve sadece bir kez yazılır.
3) throw'dan sonra "new" anahtar kelimesi ve bir yapıcı (constructor) kullanılarak bir nesne oluşturulur.

   throws'dan sonra ise sadece istisna sınıfının adı yazılır.
4) throw, belirli koşullar altında bir istisna fırlatmak için kullanılır (örneğin, yaş negatif olamaz şartını belirleriz).

   throws ise bir metodun belirli bir istisna fırlatabileceğini belirtmek için kullanılır.

1)Run butonuna bastiktan sonra console'da alinan Exception'lara Runtime Exception denir
  ArithmeticException, NullPointerException vs...
  RunTime Exception'lara Unchecked Exception'da denir. (run butonundan once kontrol edilmemis)
  2) Code yazarken kirmizi alt cizgi seklinde alinan Exceptionlar'da vardir. Bunlara da Compile Time Exception
denir,  Compile Time Exception'lara Checked Exception'da denir.(run butonuna basmadan once kontrol var).


interview sorusu
        throw ile throws arasindaki farklar nelerdir?
        1) throw method body'si icinde, throws ise method parantezinden sonra kullanilir
        2) throw method body'si icinde istenilen yerde istenildigi kadar yazilip kullanilabilir
          throws ise method signature'dan hemen sonra ve sadece bir kere yazilir
        3) throw'dan sonra new keyword'u ve constructor kullanarak object olusturulur
          throws'dan sonra ise sadece Exception class ismi yazilir
        4) throw belli sartlar icin Exception firlatmada kullanilir (age negatif olamaz diye biz sart koyduk)
           throws ise bir methodun belli bir Exception'u firlatabileceğini belirtmek icin kullanilir
           (olusabilecek bir hataya karsi yazilir)


  1) finally bloğu genellikle;
   a) Kaynakların serbest bırakılması :  (veritabani baglantisinin kesilmesi, close() methodu ile),
       Özellikle eski Java versiyonlarında (Java 7 öncesi), veritabanı bağlantıları gibi kaynaklar
       manuel olarak kapatılmalıydı. Bu tür kaynaklar, uzun süre açık bırakılırsa sistemde gereksiz
       yere yer kaplar ve potansiyel performans sorunlarına neden olabilir. Java 7 sonrasi otomatiklesti ( try-with-resources ifadesi ile)

   b) Dosyaların kapatılması :  (az once dosya baglantisi yapmistik.  fis.close(); ile kapatilabilirdi)
      Dosyaları okuma veya yazma işlemi bittikten sonra kapatmak gereklidir. Aksi halde, dosya kolları
       gereksiz yere sistemde yer kaplar.

   c) Her durumda çalıştırılması gereken temizleme işlemleri :
   (Bazı işlemler, başarılı olsun ya da olmasın, belirli bir sürecin sonunda her zaman yapılmalıdır.
   Örneğin, bir log dosyasına her işlemin başlangıç ve bitiş zamanını kaydetmek gibi. BufferedWriter ile)

   finally icin bir senaryo olusturalim; a/b bolumu ile bir index bulalim ve bu index'i kullanarak
   Array'deki elemani bulalim


   Java'da final, finally ve finalize() terimleri farklı amaçlarla kullanılan üç farklı kavramı temsil eder.
    final:
      Değişkenler İçin: final keyword'uyle tanımlanan bir variable sadece bir kez değer alabilir.
      Bu, değişkenin değerinin sonradan değiştirilemeyeceği anlamına gelir. Yani, bu değişken sabittir (constant)
      Metotlar İçin: final keyword'uyle tanımlanan bir metot, child class'lar tarafından
      override edilemez.
      Class'lar İçin: final keyword'uyle tanımlanan bir class, genişletilemez (extend edilemez).
      Yani bu class'in child'i olmaz.

    finally:
      finally bloğu, try-catch yapısının bir parçasıdır. Bu blok, try bloğunda bir istisna oluşsa da
      oluşmasa da her zaman çalıştırılır.Genellikle kaynakların serbest bırakılması,
      dosyaların kapatılması gibi temizleme işlemleri için kullanılır.

    finalize():
      Bu, Object sınıfında tanımlanan bir metottur ve varsayılan olarak hiçbir işlem yapmaz.
      Bir nesne bellekten kaldırılmadan hemen önce Garbage Collector (Çöp Toplayıcı) tarafından
      otomatik olarak çağrılır. Genellikle dış kaynakların serbest bırakılması için kullanılır,
      ancak modern Java uygulamalarında kullanımı önerilmez.