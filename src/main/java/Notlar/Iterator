1- Iterator'ler loop'larin yaptigi ayni isi yapar
       2) Iterator'lerde sonsuz loop olusma ihtimali yoktur(for each gibi)
       3) Iterator'ler ile loop'lar arasinda performans farki yoktur
       4) Iterator'ler bir collection'dan eleman silme ve bir collection'daki elemani degistirme konusunda daha basarilidir
       5) Iki tip iterator vardir:
           a) Iterator:
           Bu sadece eleman silmede kullanilir, eleman eklemek veya elemani degistirmek mumkun degildir
           b) ListIterator:
           Bu eleman silebilir, ekleyebilir ve degistirebilir

           Not:
           Iterator, sadece soldan saga (ilk elemandan son elemana) calisir
           ListIterator iki yonlu calisabilir

           remove()  : Pointer'in atladigi elemani siler
                   //hasNext() : Koleksiyon bir sonraki elemanin olup olmadigini kontrol eder (boolean)
                   // next()   : Pointer'i bir sonraki elemanin onune konumlandirir ve pointer'in atladigi elemani verir

Not: ListIterator, Iterator'ın bir alt arayüzüdür ve listeler üzerinde iki yönlü dolaşmanıza ve elemanların indekslerine erişmenize olanak tanır.
sadece List arayüzünü uygulayan sınıflarla (örneğin ArrayList, LinkedList gibi) kullanılabilir.